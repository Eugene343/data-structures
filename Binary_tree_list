class BinaryTree:
    def __init__(self, data):
        self.root = data
        self.left = None
        self.right = None

    def set_root(self, data):
        if self.root is None:
            self.root = data

    def get_root(self):
        return self.root

    def get_left(self):
        return self.left

    def add_left(self, data):
        if self.left is None:
            self.left = BinaryTree(data)
        else:
            self.left.add_left(data)

    def add_right(self, data):
        if self.right is None:
            self.right = BinaryTree(data)
        else:
            self.right.add_right(data)

    def pre_order(self):
        arr = [self.root]
        if self.left:
            arr += self.left.pre_order()
        if self.right:
            arr += self.right.pre_order()
        return arr

    def post_order(self):
        arr = [self.left]
        if self.left:
            arr += self.left.post_order()
        if self.right:
            arr += (self.right.post_order())
        arr += self.right
        return arr

    def in_order(self):
        current = self
        stack = []
        while True:
            if current is not None:
                stack.append(current)
                current = current.left
            elif stack:
                current = stack.pop()
                print(current.root, end=" ")
                current = current.right
            else:
                break


if __name__ == '__main__':
    print('Binary tree')
    root = BinaryTree(5)
    root.add_left(30)
    root.add_left(40)

    root.add_left(25)
    root.add_right(2)
    root.add_right(4)


    print(root.in_order())


